package be.yildizgames.module.http;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class HttpCall {

    /**
     * Logger.
     */
    private static final System.Logger LOGGER = System.getLogger(HttpCall.class.toString());

    /**
     * Buffer size.
     */
    private static final int BUFFER_SIZE = 1024;

    private final HttpClient client = HttpClient.newHttpClient();

    private final List<HttpTransferListener> listeners = new ArrayList<>();

    /**
     * Request the text content.
     *
     * @param uri URI to reach.
     * @return The content of the uri destination.
     */
    public final String getText(final URI uri) {
        return this.getStream(uri, HttpResponse.BodyHandlers.ofString());
    }

    public final void receiveFile(URI uri, Path destination) {
        try (
                BufferedInputStream bis = new BufferedInputStream(this.getStream(uri, HttpResponse.BodyHandlers.ofInputStream()));
                BufferedOutputStream bos = new BufferedOutputStream(Files.newOutputStream(destination))) {
            byte[] buf = new byte[BUFFER_SIZE];
            int len;
            long currentlyTransferred = 0;
            while ((len = bis.read(buf)) > 0) {
                bos.write(buf, 0, len);
                currentlyTransferred += len;
                for(HttpTransferListener l : this.listeners) {
                    l.received(uri, len, currentlyTransferred);
                }
            }
        } catch (IOException e) {
            throw new IllegalStateException("error.http.file.retrieve");
        }
    }

    public final void addTransferListener(HttpTransferListener l) {
        this.listeners.add(l);
    }

    /**
     * Call to an HTTP get method, return the stream generated by the response.
     *
     * @param url Url to request.
     * @return The stream for the request url.
     * @throws IllegalStateException If an exception occurs.
     */
    private <T> T getStream(final URI url, HttpResponse.BodyHandler<T> bodyHandler){
        HttpRequest request = HttpRequest.newBuilder(url).build();
        try {
            HttpResponse<T> response = this.client.send(request, bodyHandler);
            if (HttpCode.isError(response.statusCode())) {
                LOGGER.log(System.Logger.Level.ERROR, "Error retrieving content: {}", url);
                throw new IllegalStateException("error.http.content.retrieve");
            }
            return response.body();
        } catch (IOException | InterruptedException e) {
            LOGGER.log(System.Logger.Level.ERROR, "Error retrieving content: {}", url, e);
            throw new IllegalStateException("error.http.content.retrieve");
        }
    }
}
